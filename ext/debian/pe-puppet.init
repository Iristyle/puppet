#! /bin/sh
### BEGIN INIT INFO
# Provides:          pe-puppet
# Required-Start:    $network $named $remote_fs $syslog
# Required-Stop:     $network $named $remote_fs $syslog
# Should-Start:      pe-puppet-server
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/opt/puppet/bin/puppet
DAEMON_OPTS="agent"
NAME=agent
DESC="PE puppet agent"
PIDFILE="/var/run/pe-puppet/${NAME}.pid"

test -x $DAEMON || exit 0

[ -r /etc/default/pe-puppet ] && . /etc/default/pe-puppet

. /lib/lsb/init-functions

is_true() {
    if [ "x$1" = "xtrue" -o "x$1" = "xyes" -o "x$1" = "x0" ] ; then
        return 0
    else
        return 1
    fi
}

reload_puppet_agent() {
    start-stop-daemon --stop --quiet --signal HUP --pidfile $PIDFILE
}

start_puppet_agent() {
    if is_true "$START" ; then
        start-stop-daemon --start --quiet --pidfile $PIDFILE \
            --startas $DAEMON -- $NAME $DAEMON_OPTS
    else
        echo ""
        echo "puppet not configured to start, please edit /etc/default/pe-puppet to enable"
    fi
}

stop_puppet_agent() {
    # wait until really stopped
    PID=`cat $PIDFILE 2> /dev/null`

    start-stop-daemon --stop --quiet --oknodo --retry=TERM/30/STOP/30/KILL/30 --pidfile $PIDFILE

    if [ -n "${PID:-}" ]; then
        i=0
        while kill -0 "${PID:-}" 2> /dev/null;  do
            if [ $i = '60' ]; then
                kill -9 $PID
                rm -f $PIDFILE
                break;
            else
                if [ $i = '0' ]; then
                    echo -n " ... waiting "
                else
                    echo -n "."
                fi
                i=$(($i+1))
                sleep 1
            fi
        done
    fi
}

status_puppet_agent() {
    if [ -f "${PIDFILE}" ]; then
        status_of_proc -p "${PIDFILE}" "${DAEMON}" "${NAME}"
    else
        log_daemon_msg "${NAME} is not running"
        return 3
    fi
}

case "$1" in
    start)
    log_begin_msg "Starting $DESC"
    start_puppet_agent
    log_end_msg $?
    ;;
    stop)
    log_begin_msg "Stopping $DESC"
    stop_puppet_agent
    log_end_msg $?
    ;;
    reload)
        log_begin_msg "Reloading $DESC"
        reload_puppet_agent
        log_end_msg $?
        ;;
    status)
        status_puppet_agent
    ;;
    restart|force-reload)
    log_begin_msg "Restarting $DESC"
    stop_puppet_agent
    sleep 1
    start_puppet_agent
    log_end_msg $?
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|force-reload|reload}" >&2
    exit 1
    ;;
esac
