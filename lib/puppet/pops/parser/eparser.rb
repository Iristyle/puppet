#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 761)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'59,61,277,-131,53,240,55,-218,267,-133,-227,362,315,226,247,267,59,61',
'237,246,226,226,300,14,355,59,61,245,233,42,242,49,244,52,46,128,50',
'71,67,127,44,70,47,48,278,-131,68,13,260,-218,69,-133,-227,12,137,223',
'128,135,59,61,127,72,53,137,55,397,135,43,266,262,263,66,62,267,64,65',
'63,72,124,51,128,14,249,54,127,250,72,42,62,49,330,52,46,318,50,71,67',
'62,44,70,47,48,237,128,68,13,128,127,69,128,127,12,333,127,128,274,59',
'61,127,72,53,365,55,335,81,43,350,222,349,66,62,337,64,65,350,76,349',
'51,104,14,108,54,103,59,61,42,299,49,298,52,46,276,50,71,67,74,44,70',
'47,48,252,251,68,13,107,116,69,342,343,12,77,79,78,80,59,61,344,72,53',
'226,55,395,81,43,213,347,82,66,62,243,64,65,351,353,292,51,104,14,108',
'54,103,189,274,42,276,49,274,52,46,361,50,71,67,298,44,70,47,48,291',
'298,68,13,107,76,69,156,153,12,151,372,314,290,59,61,374,72,53,276,55',
'393,81,43,276,129,82,66,62,274,64,65,377,116,117,51,104,14,108,54,103',
'317,116,42,381,49,353,52,46,383,50,71,67,384,44,70,47,48,385,386,68',
'13,107,387,69,113,389,12,390,391,321,76,59,61,73,72,53,398,55,399,81',
'43,400,401,,66,62,,64,65,,,,51,104,14,108,54,103,,,42,,49,,52,110,,50',
'71,67,,44,70,,,,,68,13,107,,69,,,12,,,,,59,61,,72,53,,55,,81,43,,,,66',
'62,,64,65,,,,51,104,14,108,54,103,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,107,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,',
'51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,',
',,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48',
',,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50',
'71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,',
'69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,123,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,296,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67',
',44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,140,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,',
'69,,,12,,,,,59,61,,72,53,142,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,',
',,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72',
'53,,55,145,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71',
'67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64',
'65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,',
',12,,,,,59,61,,72,53,,55,302,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,145,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67',
',44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,155,,,43,,,,66,62,',
'64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69',
',,12,,,,,59,61,,72,53,,55,371,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44',
'70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,',
',12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49',
',52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70',
'47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,',
',51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43',
',,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67,,44,70,47,48',
',,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50',
'71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,',
'69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,',
',,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,',
'68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14',
',54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61',
',72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50',
'71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62',
',64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,',
'69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,',
'44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,356,,43,,,188,66,62,',
'64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69',
',,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,191',
'208,202,209,52,203,211,204,200,198,,193,206,,,,,68,13,212,207,205,,',
'12,,,,,59,61,,72,53,,55,,210,192,,,,66,62,,64,65,,,,51,,14,,54,,,,42',
',49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
',55,304,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,46,,50,71,67',
',44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64',
'65,,,,51,,14,220,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69',
',,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,',
'49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55',
',,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51',
',14,228,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,',
',,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52',
'46,,50,71,67,,44,70,47,48,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43',
',,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,',
',68,13,,,69,,,12,,,,,59,61,,72,53,324,55,,,43,,,,66,62,,64,65,,,,51',
',14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59',
'61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,',
'50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66',
'62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13',
',,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,',
',42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53',
'323,55,,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67',
',44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65',
',,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12',
',,,,59,61,,72,53,,55,326,,43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49',
',52,110,,50,71,67,,44,70,,,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,',
'43,,,,66,62,,64,65,,,,51,,14,,54,,,,42,,49,,52,110,,50,71,67,,44,70',
',,,,68,13,,,69,,,12,,,,,59,61,,72,53,,55,,,43,,,,66,62,,64,65,,59,61',
'51,,14,,54,,,,191,208,202,209,52,203,211,204,200,198,,193,206,,59,61',
',68,13,212,207,205,,,12,,,,137,,,135,72,,,,,210,192,,,,66,62,,64,65',
'81,,,51,72,137,,54,135,100,101,102,97,92,104,62,108,,103,,,93,95,94',
'96,,,,72,,,,,,,,,,,62,107,,,,99,98,,,85,86,88,87,90,91,,83,84,,,,,81',
'82,105,,,248,,,,100,101,102,97,92,104,,108,,103,89,,93,95,94,96,,,,',
',,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,248,,,82,100',
'101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99',
'98,,,85,86,88,87,90,91,,83,84,,,,,81,82,232,,,,,,,100,101,102,97,92',
'104,,108,,103,89,,93,95,94,96,,,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88',
'87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94',
'96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,,,,,81,82',
'231,,,,,,,100,101,102,97,92,104,,108,,103,89,,93,95,94,96,,,,,,,,,,',
',,,,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,,,,,81,82,230,,,,,,,100',
'101,102,97,92,104,,108,,103,89,,93,95,94,96,,,,,,,,,,,,,,,,107,,,,99',
'98,,,85,86,88,87,90,91,,83,84,,,,,81,82,229,,,,,,,100,101,102,97,92',
'104,,108,,103,89,,93,95,94,96,,,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88',
'87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,218,93,95',
'94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,',
',,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,',
'107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100,101,102,97,92',
'104,,108,,103,262,263,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85',
'86,88,87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93',
'95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84',
',,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,',
',,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100,101,102,97',
'92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86',
'88,87,90,91,81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95',
'94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,',
',,82,100,101,102,97,92,104,,108,81,103,,81,93,95,94,96,,89,,,,,104,',
'108,104,103,108,,103,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,107,,',
'107,,82,,,,,88,87,81,88,87,83,84,,83,84,,,82,89,,82,104,,108,,103,,',
',,81,,,,,89,,,89,100,101,102,97,92,104,,108,107,103,,,93,95,94,96,85',
'86,88,87,,,,83,84,,,,,,82,107,,,,99,98,,,85,86,88,87,90,91,81,83,84',
'89,,,,,82,100,101,102,97,92,104,272,108,,103,,,93,95,94,96,,89,,,,,',
',,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,,,,,81,82,105,,,,,,',
'100,101,102,97,92,104,,108,81,103,89,,93,95,94,96,,,,,,,104,,108,,103',
',,,,107,,,,99,98,,,85,86,88,87,90,91,,83,84,107,,,81,,82,,,85,86,88',
'87,,,,83,84,104,,108,81,103,82,89,,,,,,,,,,,104,,108,,103,,89,,,107',
',,,,,,,85,86,88,87,90,91,,83,84,107,,,,,82,,,85,86,88,87,90,91,81,83',
'84,,,,,,82,89,,,,92,104,,108,81,103,,,93,,,,,89,,,,92,104,,108,,103',
',,93,,107,,,,,,,,85,86,88,87,90,91,,83,84,107,,,,,82,,,85,86,88,87,90',
'91,81,83,84,,,,,,82,89,,,,92,104,,108,81,103,,,93,,,,,89,,,,92,104,',
'108,,103,,,93,,107,,,,,,,,85,86,88,87,90,91,,83,84,107,,,,,82,,,85,86',
'88,87,90,91,81,83,84,,,,,,82,89,,,97,92,104,,108,,103,,81,93,95,94,96',
',89,,,,,,97,92,104,,108,,103,,107,93,95,94,96,,,,85,86,88,87,90,91,',
'83,84,,,,107,,82,,,98,,,85,86,88,87,90,91,81,83,84,,,,89,,82,100,101',
'102,97,92,104,,108,,103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98',
',,85,86,88,87,90,91,81,83,84,,,268,,,82,100,101,102,97,92,104,,108,',
'103,,,93,95,94,96,,89,,,,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91',
'81,83,84,,,,,,82,100,101,102,97,92,104,,108,,103,,,93,95,94,96,,89,',
',,,,,,,,,,,,107,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,100,101',
'102,97,92,104,,108,81,103,,81,93,95,94,96,,89,,,,,104,,108,104,103,108',
',103,,107,,,,99,98,,81,85,86,88,87,90,91,,83,84,107,,,107,104,82,108',
',103,,,,,,,83,84,,83,84,,,82,89,,82,,,,,107,,,,,,,,,,,,,,,83,84,,286',
'208,285,209,82,283,211,287,281,280,,282,284,,,,,,,212,207,288,286,208',
'285,209,,283,211,287,281,280,,282,284,,,210,289,,,212,207,288,286,208',
'285,209,,283,211,287,281,280,,282,284,,,210,289,,,212,207,288,,,,,,',
',,,,,,,,,210,289' ]
        racc_action_table = arr = ::Array.new(6523, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,201,198,0,131,0,206,227,200,205,312,237,153,141,305,242,242,125',
'141,116,237,227,0,305,240,240,139,123,0,131,0,139,0,0,203,0,0,0,203',
'0,0,0,0,201,198,0,0,153,206,0,200,205,0,242,116,123,242,384,384,123',
'0,384,240,384,384,240,0,163,330,330,0,0,163,0,0,0,242,46,0,49,384,144',
'0,49,144,240,384,242,384,265,384,384,239,384,384,384,240,384,384,384',
'384,130,202,384,384,46,202,384,110,46,384,269,110,314,234,5,5,314,384',
'5,314,5,273,165,384,347,115,347,384,384,275,384,384,302,157,302,384',
'165,5,165,384,165,151,151,5,226,5,224,5,5,279,5,5,5,5,5,5,5,5,149,149',
'5,5,165,220,5,293,295,5,8,8,8,8,383,383,297,5,383,298,383,383,166,5',
'106,301,165,5,5,133,5,5,303,304,219,5,166,383,166,5,166,104,308,383',
'309,383,310,383,383,311,383,383,383,259,383,383,383,383,217,316,383',
'383,166,75,383,73,63,383,62,329,235,215,381,381,332,383,381,195,381',
'381,164,383,334,47,166,383,383,194,383,383,341,342,41,383,164,381,164',
'383,164,238,40,381,350,381,351,381,381,353,381,381,381,354,381,381,381',
'381,358,359,381,381,164,360,381,39,366,381,367,370,243,6,188,188,1,381',
'188,388,188,392,111,381,394,396,,381,381,,381,381,,,,381,111,188,111',
'381,111,,,188,,188,,188,188,,188,188,188,,188,188,,,,,188,188,111,,188',
',,188,,,,,12,12,,188,12,,12,,109,188,,,,188,188,,188,188,,,,188,109',
'12,109,188,109,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,109,,12,,',
'12,,,,,13,13,,12,13,,13,,,12,,,,12,12,,12,12,,,,12,,13,,12,,,,13,,13',
',13,13,,13,13,13,,13,13,,,,,13,13,,,13,,,13,,,,,14,14,,13,14,,14,,,13',
',,,13,13,,13,13,,,,13,,14,,13,,,,14,,14,,14,14,,14,14,14,,14,14,,,,',
'14,14,,,14,,,14,,,,,362,362,,14,362,,362,,,14,,,,14,14,,14,14,,,,14',
',362,,14,,,,362,,362,,362,362,,362,362,362,,362,362,362,362,,,362,362',
',,362,,,362,,,,,349,349,,362,349,,349,,,362,,,,362,362,,362,362,,,,362',
',349,,362,,,,349,,349,,349,349,,349,349,349,,349,349,,,,,349,349,,,349',
',,349,,,,,191,191,,349,191,,191,,,349,,,,349,349,,349,349,,,,349,,191',
',349,,,,191,,191,,191,191,,191,191,191,,191,191,,,,,191,191,,,191,,',
'191,,,,,42,42,,191,42,,42,,,191,,,,191,191,,191,191,,,,191,,42,,191',
',,,42,,42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,,,,,43,43,,42',
'43,,43,,,42,,,,42,42,,42,42,,,,42,,43,,42,,,,43,,43,,43,43,,43,43,43',
',43,43,,,,,43,43,,,43,,,43,,,,,44,44,,43,44,,44,,,43,,,,43,43,,43,43',
',,,43,,44,,43,,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44',
',,,,45,45,,44,45,,45,,,44,,,,44,44,,44,44,,,,44,,45,,44,,,,45,,45,,45',
'45,,45,45,45,,45,45,,,,,45,45,,,45,,,45,,,,,192,192,,45,192,,192,,,45',
',,,45,45,,45,45,,,,45,,192,,45,,,,192,,192,,192,192,,192,192,192,,192',
'192,,,,,192,192,,,192,,,192,,,,,193,193,,192,193,,193,,,192,,,,192,192',
',192,192,,,,192,,193,,192,,,,193,,193,,193,193,,193,193,193,,193,193',
',,,,193,193,,,193,,,193,,,,,333,333,,193,333,,333,,,193,,,,193,193,',
'193,193,,,,193,,333,,193,,,,333,,333,,333,333,,333,333,333,,333,333',
',,,,333,333,,,333,,,333,,,,,222,222,,333,222,,222,222,,333,,,,333,333',
',333,333,,,,333,,222,,333,,,,222,,222,,222,222,,222,222,222,,222,222',
'222,222,,,222,222,,,222,,,222,,,,,53,53,,222,53,53,53,,,222,,,,222,222',
',222,222,,,,222,,53,,222,,,,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53',
',,53,,,53,,,,,54,54,,53,54,54,54,,,53,,,,53,53,,53,53,,,,53,,54,,53',
',,,54,,54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,,,,,55,55,,54',
'55,,55,55,,54,,,,54,54,,54,54,,,,54,,55,,54,,,,55,,55,,55,55,,55,55',
'55,,55,55,,,,,55,55,,,55,,,55,,,,,60,60,,55,60,,60,,,55,,,,55,55,,55',
'55,,,,55,,60,,55,,,,60,,60,,60,60,,60,60,60,,60,60,,,,,60,60,,,60,,',
'60,,,,,229,229,,60,229,,229,229,,60,,,,60,60,,60,60,,,,60,,229,,60,',
',,229,,229,,229,229,,229,229,229,,229,229,229,229,,,229,229,,,229,,',
'229,,,,,155,155,,229,155,,155,155,,229,,,,229,229,,229,229,,,,229,,155',
',229,,,,155,,155,,155,155,,155,155,155,,155,155,155,155,,,155,155,,',
'155,,,155,,,,,65,65,,155,65,,65,,,155,,,,155,155,,155,155,,,,155,,65',
',155,,,,65,,65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65,,,65,,,,,318,318',
',65,318,,318,318,,65,,,,65,65,,65,65,,,,65,,318,,65,,,,318,,318,,318',
'318,,318,318,318,,318,318,318,318,,,318,318,,,318,,,318,,,,,74,74,,318',
'74,,74,,,318,,,,318,318,,318,318,,,,318,,74,,318,,,,74,,74,,74,74,,74',
'74,74,,74,74,74,74,,,74,74,,,74,,,74,,,,,317,317,,74,317,,317,,,74,',
',,74,74,,74,74,,,,74,,317,,74,,,,317,,317,,317,317,,317,317,317,,317',
'317,317,317,,,317,317,,,317,,,317,,,,,76,76,,317,76,,76,,,317,,,,317',
'317,,317,317,,,,317,,76,,317,,,,76,,76,,76,76,,76,76,76,,76,76,76,76',
',,76,76,,,76,,,76,,,,,77,77,,76,77,,77,,,76,,,,76,76,,76,76,,,,76,,77',
',76,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,,,,,78',
'78,,77,78,,78,,,77,,,,77,77,,77,77,,,,77,,78,,77,,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,,,,,79,79,,78,79,,79,,,78,,,,78',
'78,,78,78,,,,78,,79,,78,,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79',
'79,,,79,,,79,,,,,80,80,,79,80,,80,,,79,,,,79,79,,79,79,,,,79,,80,,79',
',,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,,,,,81,81',
',80,81,,81,,,80,,,,80,80,,80,80,,,,80,,81,,80,,,,81,,81,,81,81,,81,81',
'81,,81,81,,,,,81,81,,,81,,,81,,,,,82,82,,81,82,,82,,,81,,,,81,81,,81',
'81,,,,81,,82,,81,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,,',
'82,,,,,83,83,,82,83,,83,,,82,,,,82,82,,82,82,,,,82,,83,,82,,,,83,,83',
',83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,,,,,84,84,,83,84,,84,,,83',
',,,83,83,,83,83,,,,83,,84,,83,,,,84,,84,,84,84,,84,84,84,,84,84,,,,',
'84,84,,,84,,,84,,,,,85,85,,84,85,,85,,,84,,,,84,84,,84,84,,,,84,,85',
',84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,,,,,86,86',
',85,86,,86,,,85,,,,85,85,,85,85,,,,85,,86,,85,,,,86,,86,,86,86,,86,86',
'86,,86,86,,,,,86,86,,,86,,,86,,,,,87,87,,86,87,,87,,,86,,,,86,86,,86',
'86,,,,86,,87,,86,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,',
'87,,,,,88,88,,87,88,,88,,,87,,,,87,87,,87,87,,,,87,,88,,87,,,,88,,88',
',88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,,,,,89,89,,88,89,,89,,,88',
',,,88,88,,88,88,,,,88,,89,,88,,,,89,,89,,89,89,,89,89,89,,89,89,,,,',
'89,89,,,89,,,89,,,,,90,90,,89,90,,90,,,89,,,,89,89,,89,89,,,,89,,90',
',89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,,,,,91,91',
',90,91,,91,,,90,,,,90,90,,90,90,,,,90,,91,,90,,,,91,,91,,91,91,,91,91',
'91,,91,91,,,,,91,91,,,91,,,91,,,,,92,92,,91,92,,92,,,91,,,,91,91,,91',
'91,,,,91,,92,,91,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,',
'92,,,,,93,93,,92,93,,93,,,92,,,,92,92,,92,92,,,,92,,93,,92,,,,93,,93',
',93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,,,,,94,94,,93,94,,94,,,93',
',,,93,93,,93,93,,,,93,,94,,93,,,,94,,94,,94,94,,94,94,94,,94,94,,,,',
'94,94,,,94,,,94,,,,,95,95,,94,95,,95,,,94,,,,94,94,,94,94,,,,94,,95',
',94,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,,,,,96,96',
',95,96,,96,,,95,,,,95,95,,95,95,,,,95,,96,,95,,,,96,,96,,96,96,,96,96',
'96,,96,96,,,,,96,96,,,96,,,96,,,,,97,97,,96,97,,97,,,96,,,,96,96,,96',
'96,,,,96,,97,,96,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,',
'97,,,,,98,98,,97,98,,98,,,97,,,,97,97,,97,97,,,,97,,98,,97,,,,98,,98',
',98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,,,,,99,99,,98,99,,99,,,98',
',,,98,98,,98,98,,,,98,,99,,98,,,,99,,99,,99,99,,99,99,99,,99,99,,,,',
'99,99,,,99,,,99,,,,,100,100,,99,100,,100,,,99,,,,99,99,,99,99,,,,99',
',100,,99,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100',
',,100,,,,,101,101,,100,101,,101,,,100,,,,100,100,,100,100,,,,100,,101',
',100,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,',
'101,,,,,102,102,,101,102,,102,,,101,,,,101,101,,101,101,,,,101,,102',
',101,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,',
'102,,,,,103,103,,102,103,,103,,,102,,,,102,102,,102,102,,,,102,,103',
',102,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,',
'103,,,,,306,306,,103,306,,306,306,,103,,,103,103,103,,103,103,,,,103',
',306,,103,,,,306,,306,,306,306,,306,306,306,,306,306,,,,,306,306,,,306',
',,306,,,,,105,105,,306,105,,105,,,306,,,,306,306,,306,306,,,,306,,105',
',306,,,,105,105,105,105,105,105,105,105,105,105,,105,105,,,,,105,105',
'105,105,105,,,105,,,,,299,299,,105,299,,299,,105,105,,,,105,105,,105',
'105,,,,105,,299,,105,,,,299,,299,,299,299,,299,299,299,,299,299,,,,',
'299,299,,,299,,,299,,,,,107,107,,299,107,,107,,,299,,,,299,299,,299',
'299,,,,299,,107,,299,,,,107,,107,,107,107,,107,107,107,,107,107,,,,',
'107,107,,,107,,,107,,,,,108,108,,107,108,,108,,,107,,,,107,107,,107',
'107,,,,107,,108,,107,,,,108,,108,,108,108,,108,108,108,,108,108,,,,',
'108,108,,,108,,,108,,,,,292,292,,108,292,,292,,,108,,,,108,108,,108',
'108,,,,108,,292,,108,,,,292,,292,,292,292,,292,292,292,,292,292,,,,',
'292,292,,,292,,,292,,,,,278,278,,292,278,,278,,,292,,,,292,292,,292',
'292,,,,292,,278,,292,,,,278,,278,,278,278,,278,278,278,,278,278,,,,',
'278,278,,,278,,,278,,,,,277,277,,278,277,,277,,,278,,,,278,278,,278',
'278,,,,278,,277,,278,,,,277,,277,,277,277,,277,277,277,,277,277,,,,',
'277,277,,,277,,,277,,,,,230,230,,277,230,,230,230,,277,,,,277,277,,277',
'277,,,,277,,230,,277,,,,230,,230,,230,230,,230,230,230,,230,230,230',
'230,,,230,230,,,230,,,230,,,,,113,113,,230,113,,113,,,230,,,,230,230',
',230,230,,,,230,,113,113,230,,,,113,,113,,113,113,,113,113,113,,113',
'113,,,,,113,113,,,113,,,113,,,,,274,274,,113,274,,274,,,113,,,,113,113',
',113,113,,,,113,,274,,113,,,,274,,274,,274,274,,274,274,274,,274,274',
',,,,274,274,,,274,,,274,,,,,268,268,,274,268,,268,,,274,,,,274,274,',
'274,274,,,,274,,268,,274,,,,268,,268,,268,268,,268,268,268,,268,268',
',,,,268,268,,,268,,,268,,,,,117,117,,268,117,,117,,,268,,,,268,268,',
'268,268,,,,268,,117,117,268,,,,117,,117,,117,117,,117,117,117,,117,117',
',,,,117,117,,,117,,,117,,,,,152,152,,117,152,,152,,,117,,,,117,117,',
'117,117,,,,117,,152,,117,,,,152,,152,,152,152,,152,152,152,,152,152',
'152,152,,,152,152,,,152,,,152,,,,,231,231,,152,231,,231,,,152,,,,152',
'152,,152,152,,,,152,,231,,152,,,,231,,231,,231,231,,231,231,231,,231',
'231,,,,,231,231,,,231,,,231,,,,,246,246,,231,246,246,246,,,231,,,,231',
'231,,231,231,,,,231,,246,,231,,,,246,,246,,246,246,,246,246,246,,246',
'246,,,,,246,246,,,246,,,246,,,,,233,233,,246,233,,233,,,246,,,,246,246',
',246,246,,,,246,,233,,246,,,,233,,233,,233,233,,233,233,233,,233,233',
',,,,233,233,,,233,,,233,,,,,267,267,,233,267,,267,,,233,,,,233,233,',
'233,233,,,,233,,267,,233,,,,267,,267,,267,267,,267,267,267,,267,267',
',,,,267,267,,,267,,,267,,,,,124,124,,267,124,,124,,,267,,,,267,267,',
'267,267,,,,267,,124,,267,,,,124,,124,,124,124,,124,124,124,,124,124',
',,,,124,124,,,124,,,124,,,,,244,244,,124,244,244,244,,,124,,,,124,124',
',124,124,,,,124,,244,,124,,,,244,,244,,244,244,,244,244,244,,244,244',
',,,,244,244,,,244,,,244,,,,,255,255,,244,255,,255,,,244,,,,244,244,',
'244,244,,,,244,,255,,244,,,,255,,255,,255,255,,255,255,255,,255,255',
',,,,255,255,,,255,,,255,,,,,250,250,,255,250,,250,250,,255,,,,255,255',
',255,255,,,,255,,250,,255,,,,250,,250,,250,250,,250,250,250,,250,250',
',,,,250,250,,,250,,,250,,,,,248,248,,250,248,,248,,,250,,,,250,250,',
'250,250,,,,250,,248,,250,,,,248,,248,,248,248,,248,248,248,,248,248',
',,,,248,248,,,248,,,248,,,,,232,232,,248,232,,232,,,248,,,,248,248,',
'248,248,,204,204,248,,232,,248,,,,232,232,232,232,232,232,232,232,232',
'232,,232,232,,50,50,,232,232,232,232,232,,,232,,,,204,,,204,232,,,,',
'232,232,,,,232,232,,232,232,138,,,232,204,50,,232,50,138,138,138,138',
'138,138,204,138,,138,,,138,138,138,138,,,,50,,,,,,,,,,,50,138,,,,138',
'138,,,138,138,138,138,138,138,,138,138,,,,,264,138,264,,,264,,,,264',
'264,264,264,264,264,,264,,264,138,,264,264,264,264,,,,,,,,,,,,,,,,264',
',,,264,264,,,264,264,264,264,264,264,143,264,264,,,143,,,264,143,143',
'143,143,143,143,,143,,143,,,143,143,143,143,,264,,,,,,,,,,,,,,143,,',
',143,143,,,143,143,143,143,143,143,,143,143,,,,,122,143,122,,,,,,,122',
'122,122,122,122,122,,122,,122,143,,122,122,122,122,,,,,,,,,,,,,,,,122',
',,,122,122,,,122,122,122,122,122,122,147,122,122,,,,,,122,147,147,147',
'147,147,147,,147,,147,,,147,147,147,147,,122,,,,,,,,,,,,,,147,,,,147',
'147,,,147,147,147,147,147,147,,147,147,,,,,121,147,121,,,,,,,121,121',
'121,121,121,121,,121,,121,147,,121,121,121,121,,,,,,,,,,,,,,,,121,,',
',121,121,,,121,121,121,121,121,121,,121,121,,,,,120,121,120,,,,,,,120',
'120,120,120,120,120,,120,,120,121,,120,120,120,120,,,,,,,,,,,,,,,,120',
',,,120,120,,,120,120,120,120,120,120,,120,120,,,,,118,120,118,,,,,,',
'118,118,118,118,118,118,,118,,118,120,,118,118,118,118,,,,,,,,,,,,,',
',,118,,,,118,118,,,118,118,118,118,118,118,112,118,118,,,,,,118,112',
'112,112,112,112,112,,112,,112,,112,112,112,112,112,,118,,,,,,,,,,,,',
',112,,,,112,112,,,112,112,112,112,112,112,154,112,112,,,,,,112,154,154',
'154,154,154,154,,154,,154,,,154,154,154,154,,112,,,,,,,,,,,,,,154,,',
',154,154,,,154,154,154,154,154,154,322,154,154,,,,,,154,322,322,322',
'322,322,322,,322,,322,154,154,322,322,322,322,,154,,,,,,,,,,,,,,322',
',,,322,322,,,322,322,322,322,322,322,325,322,322,,,,,,322,325,325,325',
'325,325,325,,325,,325,,,325,325,325,325,,322,,,,,,,,,,,,,,325,,,,325',
'325,,,325,325,325,325,325,325,331,325,325,,,,,,325,331,331,331,331,331',
'331,,331,,331,,,331,331,331,331,,325,,,,,,,,,,,,,,331,,,,331,331,,,331',
'331,331,331,331,331,214,331,331,,,,,,331,214,214,214,214,214,214,,214',
',214,,,214,214,214,214,,331,,,,,,,,,,,,,,214,,,,214,214,,,214,214,214',
'214,214,214,339,214,214,,,,,,214,339,339,339,339,339,339,,339,,339,',
',339,339,339,339,,214,,,,,,,,,,,,,,339,,,,339,339,,,339,339,339,339',
'339,339,340,339,339,,,,,,339,340,340,340,340,340,340,,340,167,340,,168',
'340,340,340,340,,339,,,,,167,,167,168,167,168,,168,,340,,,,340,340,',
',340,340,340,340,340,340,,340,340,167,,,168,,340,,,,,167,167,172,168',
'168,167,167,,168,168,,,167,340,,168,172,,172,,172,,,,,346,,,,,167,,',
'168,346,346,346,346,346,346,,346,172,346,,,346,346,346,346,172,172,172',
'172,,,,172,172,,,,,,172,346,,,,346,346,,,346,346,346,346,346,346,190',
'346,346,172,,,,,346,190,190,190,190,190,190,190,190,,190,,,190,190,190',
'190,,346,,,,,,,,,,,,,,190,,,,190,190,,,190,190,190,190,190,190,,190',
'190,,,,,11,190,11,,,,,,,11,11,11,11,11,11,,11,173,11,190,,11,11,11,11',
',,,,,,173,,173,,173,,,,,11,,,,11,11,,,11,11,11,11,11,11,,11,11,173,',
',174,,11,,,173,173,173,173,,,,173,173,174,,174,175,174,173,11,,,,,,',
',,,,175,,175,,175,,173,,,174,,,,,,,,174,174,174,174,174,174,,174,174',
'175,,,,,174,,,175,175,175,175,175,175,176,175,175,,,,,,175,174,,,,176',
'176,,176,177,176,,,176,,,,,175,,,,177,177,,177,,177,,,177,,176,,,,,',
',,176,176,176,176,176,176,,176,176,177,,,,,176,,,177,177,177,177,177',
'177,178,177,177,,,,,,177,176,,,,178,178,,178,179,178,,,178,,,,,177,',
',,179,179,,179,,179,,,179,,178,,,,,,,,178,178,178,178,178,178,,178,178',
'179,,,,,178,,,179,179,179,179,179,179,180,179,179,,,,,,179,178,,,180',
'180,180,,180,,180,,181,180,180,180,180,,179,,,,,,181,181,181,,181,,181',
',180,181,181,181,181,,,,180,180,180,180,180,180,,180,180,,,,181,,180',
',,181,,,181,181,181,181,181,181,182,181,181,,,,180,,181,182,182,182',
'182,182,182,,182,,182,,,182,182,182,182,,181,,,,,,,,,,,,,,182,,,,182',
'182,,,182,182,182,182,182,182,185,182,182,,,185,,,182,185,185,185,185',
'185,185,,185,,185,,,185,185,185,185,,182,,,,,,,,,,,,,,185,,,,185,185',
',,185,185,185,185,185,185,184,185,185,,,,,,185,184,184,184,184,184,184',
',184,,184,,,184,184,184,184,,185,,,,,,,,,,,,,,184,,,,184,184,,,184,184',
'184,184,184,184,183,184,184,,,,,,184,183,183,183,183,183,183,,183,170',
'183,,169,183,183,183,183,,184,,,,,170,,170,169,170,169,,169,,183,,,',
'183,183,,171,183,183,183,183,183,183,,183,183,170,,,169,171,183,171',
',171,,,,,,,170,170,,169,169,,,170,183,,169,,,,,171,,,,,,,,,,,,,,,171',
'171,,276,276,276,276,171,276,276,276,276,276,,276,276,,,,,,,276,276',
'276,271,271,271,271,,271,271,271,271,271,,271,271,,,276,276,,,271,271',
'271,213,213,213,213,,213,213,213,213,213,,213,213,,,271,271,,,213,213',
'213,,,,,,,,,,,,,,,,213,213' ]
        racc_action_check = arr = ::Array.new(6523, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   292,   nil,   nil,   nil,   114,   277,   nil,   106,   nil,
   nil,  5820,   346,   404,   462,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258,
   190,   227,   694,   752,   810,   868,    70,   199,   nil,    44,
  4739,   nil,   nil,  1158,  1216,  1274,   nil,   nil,   nil,   nil,
  1332,   nil,   153,   156,   nil,  1506,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   225,  1622,   211,  1738,  1796,  1854,  1912,
  1970,  2028,  2086,  2144,  2202,  2260,  2318,  2376,  2434,  2492,
  2550,  2608,  2666,  2724,  2782,  2840,  2898,  2956,  3014,  3072,
  3130,  3188,  3246,  3304,   161,  3420,   176,  3536,  3594,   350,
    73,   292,  5235,  3884,   nil,   119,   -15,  4058,  5181,   nil,
  5120,  5059,  4944,    20,  4406,    -7,   nil,   nil,   nil,   nil,
    77,    -7,   nil,   169,   nil,   nil,   nil,   nil,  4768,    20,
   nil,     7,   nil,  4883,    73,   nil,   nil,  4998,   nil,   156,
   nil,   141,  4116,   -22,  5289,  1448,   nil,   123,   nil,   nil,
   nil,   nil,   nil,    61,   234,   118,   176,  5630,  5633,  6349,
  6346,  6376,  5682,  5837,  5880,  5897,  5951,  5968,  6022,  6039,
  6093,  6113,  6167,  6329,  6275,  6221,   nil,   nil,   288,   nil,
  5759,   636,   926,   984,   206,   225,   nil,   nil,    -8,   nil,
    -2,    -9,    67,    -1,  4715,    -1,    -4,   nil,   nil,   nil,
   nil,   nil,   nil,  6453,  5505,   184,   nil,   195,   nil,   182,
    95,   nil,  1100,   nil,   136,   nil,   131,    -4,   nil,  1390,
  3826,  4174,  4696,  4290,    74,   193,   nil,   -14,   251,    85,
    23,   nil,    14,   248,  4464,   nil,  4232,   nil,  4638,   nil,
  4580,   nil,   nil,   nil,   nil,  4522,   nil,   nil,   nil,   201,
   nil,   nil,   nil,   nil,  4829,    81,   nil,  4348,  4000,   100,
   nil,  6431,   nil,   114,  3942,   122,  6409,  3768,  3710,   139,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  3652,   141,   nil,   159,   nil,   106,   144,  3478,
   nil,   176,   102,   183,   161,     3,  3362,   nil,   161,   192,
   165,   200,     3,   nil,    78,   nil,   207,  1680,  1564,   nil,
   nil,   nil,  5343,   nil,   nil,  5397,   nil,   nil,   nil,   159,
   -10,  5451,   225,  1042,   230,   nil,   nil,   nil,   nil,  5559,
  5613,   241,   181,   nil,   nil,   nil,  5705,    94,   nil,   578,
   254,   232,   nil,   259,   263,   nil,   nil,   nil,   267,   268,
   272,   nil,   520,   nil,   nil,   nil,   258,   277,   nil,   nil,
   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   230,   nil,   172,    56,   nil,   nil,   nil,   286,   nil,
   nil,   nil,   288,   nil,   291,   nil,   292,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -229,  -230,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -108,  -230,  -230,  -230,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -73,
   -74,   -78,  -230,  -230,  -230,  -230,  -230,  -119,  -121,  -230,
  -230,  -157,  -167,  -230,  -230,  -230,  -180,  -181,  -182,  -183,
  -230,  -185,  -230,  -196,  -199,  -230,  -204,  -205,  -206,  -207,
  -208,  -209,  -210,  -230,  -230,    -7,  -230,  -230,  -230,  -230,
  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,
  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,  -230,
  -230,  -230,  -230,  -230,  -230,  -128,  -123,  -229,  -229,   -28,
  -230,   -35,  -230,  -230,   -75,  -230,  -230,  -230,  -230,   -85,
  -230,  -230,  -230,  -230,  -230,  -229,  -138,  -158,  -159,  -120,
  -229,  -229,  -147,  -149,  -150,  -151,  -152,  -153,   -43,  -230,
  -170,  -230,  -173,  -230,  -230,  -176,  -177,  -189,  -184,  -230,
  -192,  -230,  -230,  -230,  -230,  -230,   402,    -6,    -9,   -12,
   -13,   -14,   -15,  -230,   -18,   -19,   -20,   -21,   -22,   -23,
   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,   -33,   -34,
   -36,   -37,   -38,   -39,   -40,  -230,   -41,  -103,  -230,   -79,
  -230,  -222,  -228,  -216,  -213,  -211,  -117,  -129,  -205,  -132,
  -209,  -230,  -219,  -217,  -225,  -207,  -208,  -215,  -220,  -221,
  -223,  -224,  -226,  -128,  -127,  -230,  -126,  -230,   -42,  -211,
   -70,   -80,  -230,   -83,  -211,  -163,  -166,  -230,   -77,  -230,
  -230,  -230,  -128,  -230,  -213,  -229,  -160,  -230,  -230,  -230,
  -230,  -155,  -230,  -230,  -230,  -168,  -230,  -171,  -230,  -174,
  -230,  -186,  -187,  -188,  -190,  -230,  -193,  -194,  -195,  -211,
  -197,  -200,  -202,  -203,  -108,  -230,   -17,  -230,  -230,  -211,
  -105,  -128,  -116,  -230,  -214,  -230,  -212,  -230,  -230,  -211,
  -131,  -133,  -216,  -217,  -218,  -219,  -222,  -225,  -227,  -228,
  -124,  -125,  -212,  -230,   -72,  -230,   -82,  -230,  -212,  -230,
   -76,  -230,   -88,  -230,   -94,  -230,  -230,   -98,  -213,  -211,
  -213,  -230,  -230,  -141,  -230,  -161,  -211,  -229,  -230,  -148,
  -156,  -154,   -44,  -169,  -172,  -179,  -175,  -178,  -191,  -230,
  -230,  -107,  -230,  -212,  -211,  -111,  -118,  -112,  -130,  -134,
  -135,  -230,   -69,   -81,   -84,  -164,  -165,   -88,   -87,  -230,
  -230,   -94,   -93,  -230,  -230,  -102,   -97,   -99,  -230,  -230,
  -230,  -114,  -229,  -142,  -143,  -144,  -230,  -230,  -139,  -140,
  -230,  -146,  -198,  -201,  -104,  -106,  -115,  -122,   -71,   -86,
   -89,  -230,   -92,  -230,  -230,  -109,  -110,  -113,  -230,  -162,
  -136,  -145,  -230,   -91,  -230,   -96,  -230,  -101,  -137,   -90,
   -95,  -100 ]

racc_goto_table = [
     2,   114,     4,   130,   109,   111,   112,   148,   136,   134,
   261,   187,   195,   194,   224,   273,   352,   367,   186,   235,
   348,   215,   217,   307,   238,   159,   160,   161,   162,   319,
   158,   320,   234,    75,   118,   120,   121,   122,   336,   271,
   275,   354,   338,   139,   141,   138,   138,   143,   269,   306,
   380,   259,   147,   312,   363,   311,   239,   154,   221,   345,
   327,   256,   388,   382,   293,   379,   257,     3,   254,   297,
   255,   163,   253,   138,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   270,   190,   357,   214,
   214,   150,   157,   219,   329,   138,   152,   227,     1,   138,
   nil,   nil,   nil,   nil,   332,   nil,   190,   nil,   nil,   nil,
   279,   nil,   nil,   nil,   341,   nil,   nil,   236,   nil,   358,
   nil,   360,   236,   241,   nil,   316,   nil,   nil,   nil,   309,
   308,   310,   nil,   nil,   nil,   nil,   nil,   264,   nil,   nil,
   nil,   nil,   258,   nil,   359,   265,   130,   nil,   nil,   nil,
   nil,   366,   136,   134,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   334,   376,
   185,   294,   nil,   118,   120,   121,   373,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,   134,
   136,   134,   328,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   295,   138,   190,   190,   nil,   nil,   nil,   301,
   303,   nil,   nil,   nil,   nil,   nil,   322,   313,   322,   nil,
   325,   375,   143,   nil,   nil,   nil,   nil,   147,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   322,
   331,   nil,   nil,   nil,   nil,   nil,   190,   nil,   364,   339,
   340,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   322,   nil,   nil,   nil,   nil,   nil,
   nil,   346,   nil,   nil,   nil,   nil,   nil,   nil,   138,   nil,
   nil,   nil,   nil,   378,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   370,   369,
   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   369,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   392,   nil,   394,   396 ]

racc_goto_check = [
     2,    40,     4,    65,    10,    10,    10,    82,    32,    38,
    89,    52,    57,    55,    45,    56,    48,    67,    13,    66,
    47,    61,    61,    50,    66,     8,     8,     8,     8,    73,
     7,    73,    55,     6,    10,    10,    10,    10,    58,    59,
    39,    51,    62,    12,    12,    10,    10,    10,    53,    49,
    46,    45,    10,    69,    70,    56,    72,    10,    44,    75,
    77,    78,    67,    48,    39,    47,    79,     3,    83,    39,
    84,    12,    86,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    52,    10,    50,    10,
    10,    87,     6,    12,    39,    10,    88,    12,     1,    10,
   nil,   nil,   nil,   nil,    39,   nil,    10,   nil,   nil,   nil,
    57,   nil,   nil,   nil,    39,   nil,   nil,     4,   nil,    56,
   nil,    56,     4,     4,   nil,    45,   nil,   nil,   nil,    57,
    55,    55,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,     2,   nil,    39,     2,    65,   nil,   nil,   nil,
   nil,    39,    32,    38,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,    39,
    10,    40,   nil,    10,    10,    10,    89,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,    38,
    32,    38,    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,    10,    10,    10,   nil,   nil,   nil,     2,
     2,   nil,   nil,   nil,   nil,   nil,    10,     4,    10,   nil,
    10,    52,    10,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,    65,    10,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     4,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   108,     0,    67,     2,   nil,    28,   -46,   -52,   nil,
    -8,   nil,   -10,   -85,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -42,   nil,   nil,   nil,   nil,   nil,   -41,  -155,
   -39,   nil,   nil,   nil,   -57,  -102,  -299,  -282,  -288,  -182,
  -208,  -264,   -92,  -140,   nil,   -92,  -179,   -93,  -236,  -151,
   nil,   -86,  -234,   nil,   nil,   -46,  -106,  -300,   nil,  -182,
  -260,   nil,   -75,  -211,   nil,  -239,   nil,  -190,   -90,   -85,
   nil,   nil,   -53,   -81,   -79,   nil,   -77,    39,    43,  -144 ]

racc_goto_default = [
   nil,   nil,   368,   nil,   216,     5,     6,     7,     8,     9,
    11,    10,   305,   nil,    15,    39,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,   nil,
   nil,    40,    41,   115,   nil,   nil,   119,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   196,   nil,
   106,   nil,   197,   201,   199,   126,   nil,   nil,   125,   nil,
   nil,   131,   nil,   132,   133,   225,   144,   146,    56,    57,
    58,    60,   nil,   nil,   nil,   149,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 90, :_reduce_1,
  1, 90, :_reduce_2,
  1, 90, :_reduce_none,
  1, 91, :_reduce_4,
  1, 94, :_reduce_5,
  3, 94, :_reduce_6,
  2, 94, :_reduce_7,
  1, 95, :_reduce_8,
  3, 95, :_reduce_9,
  1, 96, :_reduce_none,
  1, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  3, 97, :_reduce_14,
  3, 97, :_reduce_15,
  1, 99, :_reduce_none,
  4, 99, :_reduce_17,
  3, 99, :_reduce_18,
  3, 99, :_reduce_19,
  3, 99, :_reduce_20,
  3, 99, :_reduce_21,
  3, 99, :_reduce_22,
  3, 99, :_reduce_23,
  3, 99, :_reduce_24,
  3, 99, :_reduce_25,
  3, 99, :_reduce_26,
  3, 99, :_reduce_27,
  2, 99, :_reduce_28,
  3, 99, :_reduce_29,
  3, 99, :_reduce_30,
  3, 99, :_reduce_31,
  3, 99, :_reduce_32,
  3, 99, :_reduce_33,
  3, 99, :_reduce_34,
  2, 99, :_reduce_35,
  3, 99, :_reduce_36,
  3, 99, :_reduce_37,
  3, 99, :_reduce_38,
  3, 99, :_reduce_39,
  3, 99, :_reduce_40,
  3, 99, :_reduce_41,
  3, 99, :_reduce_42,
  1, 101, :_reduce_43,
  3, 101, :_reduce_44,
  1, 100, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 122, :_reduce_67,
  1, 122, :_reduce_68,
  5, 103, :_reduce_69,
  3, 103, :_reduce_70,
  6, 103, :_reduce_71,
  4, 103, :_reduce_72,
  1, 103, :_reduce_73,
  1, 107, :_reduce_74,
  2, 107, :_reduce_75,
  4, 130, :_reduce_76,
  3, 130, :_reduce_77,
  1, 130, :_reduce_78,
  3, 131, :_reduce_79,
  2, 129, :_reduce_80,
  3, 133, :_reduce_81,
  2, 133, :_reduce_82,
  2, 132, :_reduce_83,
  4, 132, :_reduce_84,
  2, 110, :_reduce_85,
  5, 135, :_reduce_86,
  4, 135, :_reduce_87,
  0, 136, :_reduce_none,
  2, 136, :_reduce_89,
  4, 136, :_reduce_90,
  3, 136, :_reduce_91,
  6, 111, :_reduce_92,
  5, 111, :_reduce_93,
  0, 137, :_reduce_none,
  4, 137, :_reduce_95,
  3, 137, :_reduce_96,
  5, 109, :_reduce_97,
  1, 138, :_reduce_98,
  2, 138, :_reduce_99,
  5, 139, :_reduce_100,
  4, 139, :_reduce_101,
  1, 140, :_reduce_102,
  1, 102, :_reduce_none,
  4, 102, :_reduce_104,
  1, 142, :_reduce_105,
  3, 142, :_reduce_106,
  3, 141, :_reduce_107,
  1, 98, :_reduce_108,
  6, 98, :_reduce_109,
  6, 98, :_reduce_110,
  5, 98, :_reduce_111,
  5, 98, :_reduce_112,
  6, 98, :_reduce_113,
  5, 98, :_reduce_114,
  4, 147, :_reduce_115,
  1, 148, :_reduce_116,
  1, 144, :_reduce_117,
  3, 144, :_reduce_118,
  1, 143, :_reduce_119,
  2, 143, :_reduce_120,
  1, 143, :_reduce_121,
  6, 108, :_reduce_122,
  2, 108, :_reduce_123,
  3, 149, :_reduce_124,
  3, 149, :_reduce_125,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 146, :_reduce_128,
  1, 146, :_reduce_129,
  3, 146, :_reduce_130,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 151, :_reduce_134,
  3, 151, :_reduce_135,
  6, 112, :_reduce_136,
  7, 113, :_reduce_137,
  1, 157, :_reduce_138,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_142,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  6, 114, :_reduce_145,
  5, 114, :_reduce_146,
  1, 160, :_reduce_147,
  3, 160, :_reduce_148,
  1, 162, :_reduce_149,
  1, 162, :_reduce_150,
  1, 162, :_reduce_151,
  1, 162, :_reduce_none,
  1, 163, :_reduce_153,
  3, 163, :_reduce_154,
  1, 161, :_reduce_none,
  2, 161, :_reduce_156,
  1, 116, :_reduce_157,
  1, 154, :_reduce_158,
  1, 154, :_reduce_159,
  1, 155, :_reduce_160,
  2, 155, :_reduce_161,
  4, 155, :_reduce_162,
  1, 134, :_reduce_163,
  3, 134, :_reduce_164,
  3, 164, :_reduce_165,
  1, 164, :_reduce_166,
  1, 106, :_reduce_167,
  3, 117, :_reduce_168,
  4, 117, :_reduce_169,
  2, 117, :_reduce_170,
  3, 117, :_reduce_171,
  4, 117, :_reduce_172,
  2, 117, :_reduce_173,
  3, 120, :_reduce_174,
  4, 120, :_reduce_175,
  2, 120, :_reduce_176,
  1, 165, :_reduce_177,
  3, 165, :_reduce_178,
  3, 166, :_reduce_179,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 167, :_reduce_183,
  2, 168, :_reduce_184,
  1, 170, :_reduce_185,
  1, 172, :_reduce_186,
  1, 173, :_reduce_187,
  2, 171, :_reduce_188,
  1, 174, :_reduce_189,
  1, 175, :_reduce_190,
  2, 175, :_reduce_191,
  2, 169, :_reduce_192,
  2, 176, :_reduce_193,
  2, 176, :_reduce_194,
  3, 92, :_reduce_195,
  0, 177, :_reduce_196,
  2, 177, :_reduce_197,
  4, 177, :_reduce_198,
  1, 115, :_reduce_199,
  3, 115, :_reduce_200,
  5, 115, :_reduce_201,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 123, :_reduce_204,
  1, 126, :_reduce_205,
  1, 124, :_reduce_206,
  1, 125, :_reduce_207,
  1, 119, :_reduce_208,
  1, 118, :_reduce_209,
  1, 121, :_reduce_210,
  0, 128, :_reduce_none,
  1, 128, :_reduce_212,
  0, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 93, :_reduce_229 ]

racc_reduce_n = 230

racc_shift_n = 402

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :SUBLOCATE => 75,
  :RENDER_STRING => 76,
  :RENDER_EXPR => 77,
  :EPP_START => 78,
  :EPP_END => 79,
  :EPP_END_TRIM => 80,
  :FUNCTION => 81,
  :LOW => 82,
  :HIGH => 83,
  :CALL => 84,
  :LISTSTART => 85,
  :MODULO => 86,
  :TITLE_COLON => 87,
  :CASE_COLON => 88 }

racc_nt_base = 89

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 135)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 168)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_75(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_79(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_80(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_82(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_83(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 243)
  def _reduce_85(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_89(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_90(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_91(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_95(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_96(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_97(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_98(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_99(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 336)
  def _reduce_104(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_105(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_106(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_107(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_108(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 398)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_115(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_119(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_124(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_125(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_130(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 509)
  def _reduce_136(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 523)
  def _reduce_137(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 533)
  def _reduce_138(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_153(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_154(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_157(val, _values, result)
     result = Factory.QNAME(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_158(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_159(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_163(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_165(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_166(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_167(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_168(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_170(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_171(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_172(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_173(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_174(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_175(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_176(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_177(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_178(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_179(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_184(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_187(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_188(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_189(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_190(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_191(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_192(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_193(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_194(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_195(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_196(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_197(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_198(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_199(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_200(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_201(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_204(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_205(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_206(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_207(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_208(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_209(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_210(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 211 omitted

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_212(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_229(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
